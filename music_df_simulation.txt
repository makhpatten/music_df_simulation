Simulation of Music DF Algorithm in MATLAB
Mark Patten
May 12, 2025

This is a basic MATLAB script to simulate the MUSIC algorithm to find the direction of signals received by an antenna array.  I wrote it as part of a job interview question to demonstrate a DF algorithm.

Simulation of Received Antenna Array Signals 

Typically, we are simulating the digitally sampled value of the RF signal impinging on each antenna. Since the RF signal will be analog downshifted in a completely linear fashion, using local oscillators that are phase locked among antennas (i.e., each antenna receiver channel uses the same reference oscillator), we don't need to
simulate at the RF frequency. The downshifted signal will ultimately be sampled using an AD, and then the signal will typically be further digitally downconverted, filtered, and decimated to become the “baseband” signal. Because all these operations have been linear, the phase and amplitude relationships between signal at different antennas has been preserved without distortion. The simulation only needs to generate samples for the signal at this point in the processing where it is at the baseband sample rate. It will be far less than the A/D sample rate, as it only needs the bandwidth to contain the desired signal of interest.
Further simplifying things, most direction finding algorithms don't use time samples---they only need the “second order” statistics (i.e., the covariance) between pairs of antennas. So therefore we don't need continuous time
samples---what we need to generate for the simulation are merely “snapshots” of the baseband digital signal of each antenna.  To simulate antenna snapshots, we need to generate an environment with a set number of transmitter signals.  Parameters for each of these transmitter signals would include the received signal strength (expressed as SNR), and the direction of arrival (DoA) of each signal relative to the antenna array.  Since we only need snapshots, not time samples, each transmitter signal can be simulated by generating random vectors with the statistics of the desired transmitter signal type. For instance, a constant modulus signal such as FM can be simulated with a vector of uniformly random phase and constant magnitude.  The arithmetic representation of the hardware might be adequately simulated using floating point arithmetic. If the simulation is done using floating point arithmetic, then there is plenty of dynamic range available. So each transmitter's SNR can be simulated by generating the vector magnitude relative to a random Gaussian noise vector with a unity variance.
For each antenna, each transmitter signal vector is phase shifted dependent on its desired DoA. This phase shift could be calculated using an idealized geometry for the antenna array, or it could come from actual calibration data in the form of a look up table or parameters from a curve fit to the calibration data. I am
guessing that it is desired to use a calibration table based on actual data, so that algorithms are tested with the actual antenna geometry. But a simple simulation using an idealized geometry could consist of an array of antennas, all equally spaced in a straight line. With this antenna geometry, the theoretical relative phase shift is easily calculated from the DoA and the ratio of the antenna spacing to the signal wavelength.
The proposed simulation that I have described above models the received signals added together at each antenna, with no distortion other than the phase shift and additive Gaussian noise. The parameters for the simulation would be the number of antennas, the spacing (relative to wavelength), the number of snapshots desired, the number of simulated transmitted signals, and the DoA and SNR of each transmitted signal. A more complex simulation might include a way to simulate other effects such as correlated multipath interference, non-Gaussian noise, non-linear receiver effects, fixed point arithmetic quantization issues, and perhaps other things that I don't know much about.

Explanation of MUSIC Algorithm

MUSIC estimates the directions of signals by using eigenvector analysis. The antenna covariance matrix is “decomposed” into its eigenvalue and eigenvector space. The eigenvectors are sorted according to the magnitude of its corresponding eigenvalue. The first eigenvectors in the sorted order, associated with large eigenvalues, are considered to be associated with actual received signals. The ending eigenvectors, associated with the small eigenvalues, are considered to be part of the noisespace.  

The key fact of MUSIC is that the noise eigenvectors are orthogonal to the signal space. So if you take the noise space eigenvectors only, and multiply it by a steering vector swept in all desired directions, you get a near-zero response in the directions of signals. The inverse of that sweep is the MUSIC spectrum, with peaks at the desired AoAs of signals.  

One of the big issues with MUSIC algorithms is deciding what eigenvectors are signals and which are noise---i.e., deciding how many signals you have. This is critical for dividing the vectors into signal space and noise space. There are algorithms to look at the relative eigenvalue magnitudes, and try to decide where the “knee” is that divides the large eigenvalues associated with signals from small noise eigenvalues.  

Another issue with MUSIC is that the degrees of freedom are limited by the number of antennas, so the algorithm only successfully works when the number of transmitted signals is one less than the number of antennas. More transmitters than antennas (or the same number or transmitters as antennas) causes the mathematics to be under determined and causes the algorithm to fail. 

A third issue is that MUSIC is particularly vulnerable to multipath interference, because multipath results in the antenna array receiving correlated signals from multiple directions, which causes errors in the correct DF and also eats up degrees of freedom of the antenna array.
